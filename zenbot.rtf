{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green147\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c57647\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab708
\pard\pardeftab708\li-297\ri2213\sl276\slmult1\sb278\partightenfactor0

\f0\fs24 \cf0 // Adds support for GET requests to our webhook \
\pard\pardeftab708\li-9\ri3653\sl276\slmult1\sb43\partightenfactor0
\cf0 app.get('/webhook', (req, res) => \{ \
\pard\pardeftab708\li-9\ri1781\sl276\slmult1\sb316\partightenfactor0
\cf0 // Your verify token: should be a random string. let VERIFY_TOKEN = "<YOUR_VERIFY_TOKEN>" \
\pard\pardeftab708\li-9\ri2501\sl276\slmult1\sb316\partightenfactor0
\cf0 // Parse the query params let mode = req.query['hub.mode']; let token = req.query['hub.verify_token']; let challenge = req.query['hub.challenge']; \
\pard\pardeftab708\li-297\fi585\ri-91\sl276\slmult1\sb321\partightenfactor0
\cf0 // Checks if a token and mode were in the query string of the request \
\pard\pardeftab708\li-9\ri5813\sl276\slmult1\sb43\partightenfactor0
\cf0 if (mode && token) \{ \
\pard\pardeftab708\li278\ri773\sl276\slmult1\sb316\partightenfactor0
\cf0 // Checks if the mode and token sent are correct if (mode === 'subscribe' && token === VERIFY_TOKEN) \{ \
\pard\pardeftab708\li566\ri485\sl276\slmult1\partightenfactor0
\cf0 // Responds with the challenge token from the request res.status(200).send(challenge); \
\pard\pardeftab708\li278\ri7253\sl276\slmult1\sb316\partightenfactor0

\f1 \cf0 \}
\f0  else \{ \
\pard\pardeftab708\li-9\ri197\sl276\slmult1\sb43\partightenfactor0
\cf0 // Responds with '403 Forbidden' if tokens do not match res.sendStatus(403); \} \} \}); \
\pard\pardeftab708\li-297\ri159\sl276\slmult1\sb878\partightenfactor0

\f1 \cf0 \
\
\pard\pardeftab708\li-297\ri3365\sl276\slmult1\sb278\partightenfactor0

\f0 \cf0 // Creates the endpoint for our webhook \
\pard\pardeftab708\li-9\ri3509\sl276\slmult1\sb38\partightenfactor0
\cf0 app.post('/webhook', (req, res) => \{ \
\pard\pardeftab708\li-9\ri5813\sl276\slmult1\sb321\partightenfactor0
\cf0 let body = req.body; \
\pard\pardeftab708\li-9\ri917\sl276\slmult1\sb321\partightenfactor0
\cf0 // Checks if this is an event from a page subscription if (body.object === 'page') \{ \
\pard\pardeftab708\li278\ri-522\sl276\slmult1\sb321\partightenfactor0
\cf0 // Iterates over each entry - there may be multiple if batched body.entry.forEach(function(entry) \{ \
\pard\pardeftab708\li566\ri53\sl276\slmult1\sb321\partightenfactor0
\cf0 // Gets the message: entry.messaging is an array, but // will only ever contain one message, so we get index 0 let webhook_event = entry.messaging[0]; \
\pard\pardeftab708\li566\ri2069\sl276\slmult1\sb321\partightenfactor0
\cf0 // Get the sender PSID let sender_psid = webhook_event.sender.id; \
\pard\pardeftab708\li566\ri485\sl276\slmult1\sb321\partightenfactor0
\cf0 // Check if the event is a message or postback and // pass the event to the appropriate handler function if (webhook_event.message) \{ \
\pard\pardeftab708\li566\fi-278\ri629\sl276\slmult1\sb38\partightenfactor0
\cf0 handleMessage(sender_psid, webhook_event.message); \} else if (webhook_event.postback) \{ \
\pard\pardeftab708\li278\fi9\ri341\sl276\slmult1\sb43\partightenfactor0
\cf0 handlePostback(sender_psid, webhook_event.postback); \} \}); \
\pard\pardeftab708\li-297\ri629\sl276\slmult1\sb321\partightenfactor0
\cf0 // Returns a '200 OK' response to all requests res.status(200).send('EVENT_RECEIVED'); \} else \{ // Returns a '404 Not Found' if event is not from a page subscription \
\pard\pardeftab708\li-9\fi297\ri5525\sl276\slmult1\sb43\partightenfactor0
\cf0 res.sendStatus(404); \} \}); \
\pard\pardeftab708\li-297\ri1061\sl276\slmult1\sb278\partightenfactor0

\f1 \cf0 \

\f0 // Handles messages events function handleMessage(sender_psid, received_message) \{ \
\pard\pardeftab708\li-297\fi441\ri773\sl276\slmult1\sb38\partightenfactor0
\cf0 let response = \{\}; //... callSendAPI(sender_psid, response); \}
\fs40 \sub // Handles messaging_postbacks events 
\fs24 \nosupersub function handlePostback(sender_psid, received_postback) \{ \
\pard\pardeftab708\li-297\ri2501\sl276\slmult1\sb38\partightenfactor0
\cf0 let response = \{\}; //... callSendAPI(sender_psid, response); \}
\fs40 \sub // Sends response messages via the Send API 
\fs24 \nosupersub function callSendAPI(sender_psid, response) \{ // Construct the message body let request_body = \{ \
\pard\pardeftab708\li-9\ri6677\sl276\slmult1\sb38\partightenfactor0
\cf0 "recipient": \{ \
\pard\pardeftab708\li-297\fi585\ri1781\sl276\slmult1\sb43\partightenfactor0
\cf0 "id": sender_psid \}, "message": response \}
\fs40 \sub // Send the HTTP request to the Messenger Platform 
\fs24 \nosupersub request(\{ \
\pard\pardeftab708\li-297\ri-378\sl276\slmult1\sb38\partightenfactor0
\cf0 "uri": "https://graph.facebook.com/v2.6/me/messages", "qs": \{ "access_token": PAGE_ACCESS_TOKEN \}, //do not forget to specify the Page Access Token \
\pard\pardeftab708\li-297\ri5525\sl276\slmult1\sb38\qc\partightenfactor0
\cf0 "method": "POST", "json": request_body \}, (err, res, body) => \{ \
\pard\pardeftab708\li-9\ri7109\sl276\slmult1\sb38\partightenfactor0
\cf0 if (!err) \{ \
\pard\pardeftab708\li-9\fi297\ri4373\sl276\slmult1\sb38\partightenfactor0
\cf0 console.log('message sent!') \} else \{ \
\pard\pardeftab708\li-297\fi585\ri1637\sl276\slmult1\sb38\partightenfactor0
\cf0 console.error("Unable to send message:" + err); \} \}); \} \
\pard\pardeftab708\li-297\ri-91\sl276\slmult1\sb283\partightenfactor0

\f1 \cf0 \

\f0 response = \{ "text": `Hi! I'm Zenbot and I can help you improve your skills on Stack Overflow.` \} ou bien un message riche compos\'e9 d'un titre, d'une image et de boutons : \
\pard\pardeftab708\li-297\ri7253\sl276\slmult1\sb283\partightenfactor0
\cf0 response = \{ \
\pard\pardeftab708\li566\ri5957\sl276\slmult1\sb38\partightenfactor0
\cf0 "attachment": \{ \
\pard\pardeftab708\li854\ri5093\sl276\slmult1\sb38\partightenfactor0
\cf0 "type": "template", "payload": \{ \
\pard\pardeftab708\li1142\ri3653\sl276\slmult1\sb38\partightenfactor0
\cf0 "template_type": "generic", "elements": [\{ \
\pard\pardeftab708\li-297\fi2025\ri-522\sl276\slmult1\sb43\partightenfactor0
\cf2 "\cf0 title": "How to send request on click React Hooks way ?", \
\pard\pardeftab708\li-297\fi2025\ri197\sl276\slmult1\sb38\partightenfactor0
\cf0 "subtitle": "https://stackoverflow.com/questions/ 55647287/how-to-send-request-on-click-react-hooks-way", \
\pard\pardeftab708\li1430\ri3221\sl276\slmult1\sb38\partightenfactor0
\cf0 "image_url": attachment_url, "buttons": [ \
\pard\pardeftab708\li1718\ri6821\sl276\slmult1\sb43\partightenfactor0

\f1 \cf0 \{
\f0  \
\pard\pardeftab708\li1718\ri3509\sl276\slmult1\sb38\partightenfactor0
\cf0 "type": "postback", "title": "It helped!", "payload": "useful", \}, \{ \
\pard\pardeftab708\li-297\ri-72\sl276\slmult1\sb43\partightenfactor0
\cf0 "type": "postback", "title": "Not very useful.", "payload": "useless", \} ], \}] \} \} \} \
\
\
\pard\pardeftab708\ri-340\sl276\slmult1\partightenfactor0

\f1 \cf0 \
}